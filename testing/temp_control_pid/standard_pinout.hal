# standard pinout config file for 3-axis steppers
# using a parport for I/O
#
# first load the parport driver
loadrt hal_rpirboq 
#loadrt encoder num_chan=1
loadrt pid num_chan=1
loadrt pwmgen output_type=0
loadrt not count=1

#addf parport.0.read base-thread 1
addf rpirboq.update-rpirboq base-thread 

addf rpirboq.read-rpirboq servo-thread 

#addf encoder.capture-position servo-thread
#addf encoder.update-counters base-thread
addf pid.0.do-pid-calcs servo-thread

addf pwmgen.make-pulses base-thread
addf pwmgen.update servo-thread
addf not.0 base-thread

# for temp-measurement input to pin13
#net pin13 parport.0.pin-13-in encoder.0.phase-A
#setp encoder.0.counter-mode 1 

net temp_volt rpirboq.analog.1.values pid.0.feedback

net pidout pid.0.output pwmgen.0.value
net pwmout pwmgen.0.pwm rpirboq.pwm.1.control

setp pid.0.Pgain -0.75
setp pid.0.Igain -0.1
setp pid.0.Dgain 0
setp pid.0.maxoutput 30

setp pwmgen.0.scale 1
setp pwmgen.0.pwm-freq 100
setp pwmgen.0.dither-pwm 0
setp pwmgen.0.max-dc 0.75
setp pwmgen.0.min-dc 0.0


setp rpirboq.enable-mot FALSE
#
# finally connect physical pins to the signals
net Xstep => rpirboq.servo.2.control
net Xdir  => rpirboq.servo.3.control
net Ystep => rpirboq.servo.6.control
net Ydir  => rpirboq.servo.7.control
net Zstep => rpirboq.servo.4.control
net Zdir  => rpirboq.servo.5.control

# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# connect "spindle on" motion controller pin to a physical pin
# net spindle-on motion.spindle-on => parport.0.pin-09-out

###
### You might use something like this to enable chopper drives when machine ON
### the Xen signal is defined in core_stepper.hal
###

# net Xen => parport.0.pin-01-out

###
### If you want active low for this pin, invert it like this:
###

# setp parport.0.pin-01-out-invert 1

###
### A sample home switch on the X axis (axis 0).  make a signal,
### link the incoming parport pin to the signal, then link the signal
### to EMC's axis 0 home switch input pin
###

# net Xhome parport.0.pin-10-in => axis.0.home-sw-in

###
### Shared home switches all on one parallel port pin?
### that's ok, hook the same signal to all the axes, but be sure to 
### set HOME_IS_SHARED and HOME_SEQUENCE in the ini file.  See the
### user manual!
###

# net homeswitches <= parport.0.pin-10-in
# net homeswitches => axis.0.home-sw-in
# net homeswitches => axis.1.home-sw-in
# net homeswitches => axis.2.home-sw-in

###
### Sample separate limit switches on the X axis (axis 0)
###

# net X-neg-limit parport.0.pin-11-in => axis.0.neg-lim-sw-in
# net X-pos-limit parport.0.pin-12-in => axis.0.pos-lim-sw-in

###
### Just like the shared home switches example, you can wire together
### limit switches.  Beware if you hit one, EMC will stop but can't tell
### you which switch/axis has faulted.  Use caution when recovering from this.
###

# net Xlimits parport.0.pin-13-in => axis.0.neg-lim-sw-in axis.0.pos-lim-sw-in
