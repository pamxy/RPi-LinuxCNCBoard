/**   Copyright (C) 2013 Rodolfo Boris Oporto Quisbert
*
*    This file is part of rpi_rboq.
*
*    Portions of this code is based on stepgen.c
*    by John Kasunich, Copyright (C) 2003-2007
*    
*    Portions of this code is based on hal_picnc.c
*    by GP Orcullo, Copyright (C) 2013
*
*    This program is free software; you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation; either version 2 of the License, or
*    (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program; if not, write to the Free Software
*    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
*/

component hal_rpirboq "Driver for Raspberry Pi rpi_rboq board";

description """Usage: loadrt hal_rpirboq""";

pin in bit servo.#.control [10] = 0 "Steppers control pins for rpi-rboq board. 0: STEP_MOT1, 1: DIR_MOT1, 2: STEP_MOT2, 3: DIR_MOT2, 4: STEP_MOT3, 5: DIR_MOT3, 6: STEP_MOT4, 7: DIR_MOT4, 8: STEP_MOT5, 9: DIR_MOT5.";
pin in bit enable_mot =0 "Enable motors signal.";
pin in bit pwm.#.control [4] = 0 "PWM output pins for rpi-rboq board. 0: PWM1, 1: PWM2, 2: PWM3, 3: PWM4";
pin out float analog.#.values [6] =0.0"Analog inputs readed by the ADS8556 (in Volts). 0: CHA_0 , 1: CHA_1, 2: CHB_0 , 3: CHB_1, 4: CHC_0 , 5: CHC_1.";
pin out float temp.#.thermistor [6]=0.0 "Analogue outputs read by the ADS8556 (in ÂºC).";


function update nofp "Update the signals values: servo.i.control, enable_mot, pwm.i.control.";
function reset nofp "Reset the default values in signals.";
function read nofp "Read and update analog.i.in, temp.i.thermistor.";


option singleton;
option extra_setup;
option extra_cleanup;


license "GPL";
author "Rodolfo Boris Oporto Quisbert";
;;

#include "rtapi.h"
#include "rtapi_bitops.h"
#include "rtapi_app.h"
#include "hal.h"

#if !defined(BUILD_SYS_USER_DSO)
#error "This driver is for usermode threads only"
#endif

#if !defined(TARGET_PLATFORM_RASPBERRY)
#error "This driver is for the Raspberry Pi platform only"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>
#include "hal_rpirboq.h"

volatile unsigned *gpio, *spi;

static unsigned long ns2tsc_factor;
#define ns2tsc(x) (((x) * (unsigned long long)ns2tsc_factor) >> 12)

static volatile char txBuf[32];
static volatile char rxBuf[32];

static int map_gpio();
static void setup_gpio();
static void restore_gpio();
static void reset_board();
static void write_mcp23s17(char, char);
static void read_ads8556(void);
static void setup_ads8556(void);
static void setup_mcp23s17(void);



EXTRA_SETUP() {
	int retval = 0;
	rtapi_print_msg(RTAPI_MSG_INFO,"Setup ...\n");
	
	/*Maping GPIO*/
	retval = map_gpio();
	if (retval < 0) {
		rtapi_print_msg(RTAPI_MSG_ERR,
		"HAL_RPIRBOQ: ERROR: cannot map GPIO memory\n");
		return retval;
	}
	
	/*Setup the board*/
	setup_gpio();
	reset_board();
	setup_ads8556();
	setup_mcp23s17();	

	return 0;
}

EXTRA_CLEANUP() {
	/*Restoring GPIO maping*/
	if (gpio != MAP_FAILED && spi != MAP_FAILED) {
		restore_gpio();
		munmap((void *)gpio,BLOCK_SIZE);
		munmap((void *)spi,BLOCK_SIZE);
	}
}
FUNCTION(update) {
	char out;
	char mask;
	char reset_m;
	char reset_v;
	out = 0x00;
	mask = 0x80;
	//printf("In write_port\n");
	int b;
	/* assemble output byte for data port from 8 source variables */
	for (b = 0; b < 8; b++) {
		/* get the data, add to output byte */
		if (servo_control(b)) {
			out |= mask;
		}
		mask >>= 1;
	}
	write_mcp23s17(out,GPIOA);
	
	out = 0x00;
	mask = 0x80;
	
	for (b = 8; b < 10; b++) {
		/* get the data, add to output byte */
		if (servo_control(b)) {
			out |= mask;
		}
		mask >>= 1;
	}
	
	for (b = 0; b < 2; b++) {
		/* get the data, add to output byte */
		if (pwm_control(b)) {
			out |= mask;
		}
		mask >>= 1;
	}
	mask>>=1;
		
	for (b = 2; b < 4; b++) {
		/* get the data, add to output byte */
		if (pwm_control(b)) {
			out |= mask;
		}
		mask >>= 1;
	}
	
	if (enable_mot) {
			out |= mask;
	}
	
	write_mcp23s17(out,GPIOB);
}

FUNCTION(reset) {
	rtapi_print_msg(RTAPI_MSG_INFO,"In reset_port\n");
	u64 deadline, reset_time_tsc;
	char out = (outdata & ~reset_mask)
	^ reset_val;
	if (reset_time > period / 4)
	reset_time = period / 4;
	reset_time_tsc = ns2tsc(reset_time);

	if (out!= outdata) {
		deadline = write_time + reset_time_tsc;
		while (rtapi_get_clocks() < deadline) {
		}
		write_mcp23s17(out,GPIOA );
	}
}

FUNCTION(read) {
	rtapi_print_msg(RTAPI_MSG_INFO,"In read_adc\n");
	int b;
	u32 chanel_hex;
	/* are we using the data port for input? */
	//if (_data_dir != 0) {
	/* yes, read the data port */
	/* Read data*/
	
	read_ads8556();
	// FAlta arreglar formatos 
	for(b=0;b<6;b++){
		chanel_hex=((u32)rxBuf[b*2]*256)+(u32)rxBuf[(2*b)+1];
		analogue_in(b)=((5.0/65536)* (0.5+chanel_hex));
	}
	
}

int map_gpio() {
	int fd;
	rtapi_print_msg(RTAPI_MSG_INFO,"Mapgpio ...\n");
	fd = open("/dev/mem", O_RDWR | O_SYNC);
	if (fd < 0) {
		rtapi_print_msg(RTAPI_MSG_ERR, "hal_rpirboq: can't open /dev/mem \n");
		return -1;
	}

	/* mmap GPIO */
	gpio = mmap(NULL, BLOCK_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
	BCM2835_GPIO_BASE);
	
	rtapi_print_msg(RTAPI_MSG_INFO, "GPIO maped %x\n", BCM2835_GPIO_BASE);
	
	if (gpio == MAP_FAILED) {
		rtapi_print_msg(RTAPI_MSG_ERR, "hal_rpirboq: can't map gpio\n");
		close(fd);
		return -1;
	}

	/* mmap SPI */
	spi = mmap(NULL, BLOCK_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
	BCM2835_SPI_BASE);

	close(fd);

	if (spi == MAP_FAILED) {
		rtapi_print_msg(RTAPI_MSG_ERR, "hal_rpirboq: can't map spi\n");
		return -1;
	}
	
	rtapi_print_msg(RTAPI_MSG_INFO, "SPI maped %x\n", BCM2835_SPI_BASE);
	return 0;
}

void setup_gpio() {
	u32 x;

	/* BUSY_INT_ADC GPIO 22, input */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (2 * 3));
	BCM2835_GPFSEL2 = x;

	/* INT_A_MCP GPIO 23, input */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (3 * 3));
	BCM2835_GPFSEL2 = x;

	/* INT_B_MCP GPIO 24, input */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (4 * 3));
	BCM2835_GPFSEL2 = x;

	/* RESET_ADC GPIO 04, output */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (4 * 3));
	x |= (0b001 << (4 * 3));
	BCM2835_GPFSEL0 = x;

	/* STBY_ADC GPIO 17, output */
	x = BCM2835_GPFSEL1;
	x &= ~(0b111 << (7 * 3));
	x |= (0b001 << (7 * 3));
	BCM2835_GPFSEL1 = x;

	/* RESET_MCP GPIO 25, output */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (5 * 3));
	x |= (0b001 << (5 * 3));
	BCM2835_GPFSEL2 = x;

	/* CONV_A_ADC GPIO 27, output */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (7 * 3));
	x |= (0b001 << (7 * 3));
	BCM2835_GPFSEL2 = x;

	/* CE1_ADC GPIO 7, output */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (7 * 3));
	x |= (0b100 << (7 * 3));
	BCM2835_GPFSEL0 = x;

	/* CE0_MCP GPIO 8, output */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (8 * 3));
	x |= (0b100 << (8 * 3));
	BCM2835_GPFSEL0 = x;

	/* change SPI pins */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (9 * 3));
	x |= (0b100 << (9 * 3));
	BCM2835_GPFSEL0 = x;

	x = BCM2835_GPFSEL1;
	x &= ~(0b111 << (0 * 3) | 0b111 << (1 * 3));
	x |= (0b100 << (0 * 3) | 0b100 << (1 * 3));
	BCM2835_GPFSEL1 = x;

	

	BCM2835_SPICS = 0;

}

void restore_gpio() {
	u32 x;

	/* change all used pins back to inputs */

	/* RESET_ADC GPIO 04, restore */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (4 * 3));
	BCM2835_GPFSEL0 = x;

	/* STBY_ADC GPIO 17, restore */
	x = BCM2835_GPFSEL1;
	x &= ~(0b111 << (7 * 3));
	BCM2835_GPFSEL1 = x;

	/* RESET_MCP GPIO 25, output */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (5 * 3));
	x |= (0b001 << (5 * 3));
	BCM2835_GPFSEL2 = x;

	/* CONV_A_ADC GPIO 27, restore */
	x = BCM2835_GPFSEL2;
	x &= ~(0b111 << (7 * 3));
	BCM2835_GPFSEL2 = x;

	/* CE1_ADC GPIO 7, restore */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (7 * 3));
	BCM2835_GPFSEL0 = x;

	/* CE0_MCP GPIO 8, restore */
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (8 * 3));
	BCM2835_GPFSEL0 = x;

	/* change SPI pins to inputs*/
	x = BCM2835_GPFSEL0;
	x &= ~(0b111 << (9 * 3));
	BCM2835_GPFSEL0 = x;

	x = BCM2835_GPFSEL1;
	x &= ~(0b111 << (0 * 3) | 0b111 << (1 * 3));
	BCM2835_GPFSEL1 = x;
}

void reset_board() {
	u32 x, i;

	//Ver si esto afecta/* GPIO 7 is configured as a tri-state output pin */

	/* ADC reset is active high , MCP active low*/
	for (i = 0; i < 0x10000; i++) {
		BCM2835_GPSET0 = (1l << 4);
		BCM2835_GPCLR0 = (1l << 25);
	}

	/* wait until the board is ready */
	for (i = 0; i < 0x300000; i++) {
		BCM2835_GPCLR0 = (1l << 4);
		BCM2835_GPSET0 = (1l << 25);
		BCM2835_GPSET0 = (1l << 17);
	}

}

static void write_mcp23s17(char data, char reg) {
	char *buf;
	int i;
	BCM2835_SPICLK = SPICLKDIV_32;
	//printf("In write_mcp23s17\n");
	/* activate transfer */ //TA=1
	BCM2835_SPICS |= SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX;
	BCM2835_SPICS |= SPI_CS_TA;

	BCM2835_SPIFIFO=(OPCODEW | (MCP_ADDR << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	BCM2835_SPIFIFO= reg;                                   // Send the register we want to write
	BCM2835_SPIFIFO= data;     
	
	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */ //Clear TA
	BCM2835_SPICS &=(~SPI_CS_TA);

	BCM2835_SPICS &= (~SPI_CS_CLEAR_RX) & (~SPI_CS_CLEAR_TX);

}

static void read_ads8556(void){
	char *buf;
	int i, j, b;
	/* set up SPI */
	BCM2835_SPICLK = SPICLKDIV_8;
	
	BCM2835_SPICS |= SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX | SPI_CS_CS_01|SPI_CS_CPOL;
	/* clear FIFOs */
	///*Set flag to detect falling edge in BUSY_INT*/
	//BCM2835_GPAFEN0 = (1l << 22);
	
	/*Activation of CONV_A GPIO*/
	BCM2835_GPSET0 = (1l << 27);
	
	//while (!(BCM2835_GPEDS0 & (1l << 22))){}
	//printf("BCM2835_GPEDS0 %x:", BCM2835_GPEDS0);
	//BCM2835_GPEDS0= (1l << 22);
	//printf("BCM2835_GPEDS0 %x:", BCM2835_GPEDS0);
	
	for(i=0;i<3;i++){
		
		
		/* activate transfer *///TA=1
		BCM2835_SPICS |= SPI_CS_TA ; /*SPI Mode 2, CS1*/

		BCM2835_SPIFIFO = 0xFF;
		BCM2835_SPIFIFO = 0x02;
		BCM2835_SPIFIFO = 0x00;
		BCM2835_SPIFIFO = 0x00; // Send the MCP23S17 opcode, chip address, and write bit
		
		
		/* wait until transfer is finished */
		while (!(BCM2835_SPICS & SPI_CS_DONE)){}
		/* clear DONE bit */ //Clear TA
		BCM2835_SPICS &=(~SPI_CS_TA);  // CLear ta
		/* read buffer */
		for(j=0; j<1000; j++){}
		//buf = (char *) rxBuf;
		for (j = 0; j < 4; j++){
			rxBuf[(i*2)+j] = BCM2835_SPIFIFO;
			//printf("rxBuf : %x\n",rxBuf[(i*2)+j] );

		}
		
		
	}
    /*Unactivation of CONV_A GPIO*/
	BCM2835_GPCLR0 = (1l << 27);

	//unsigned aux;
	/* split the bits into 16 variables (8 regular, 8 inverted) */
	BCM2835_SPICS &= (~SPI_CS_CLEAR_RX) & (~SPI_CS_CLEAR_TX) & (~SPI_CS_CS_01) & (~SPI_CS_CPOL);
	//printf("BCMSPIC: %x\n",BCM2835_SPICS );
}

static void setup_ads8556(void){
	
	/* set up SPI */
	BCM2835_SPICLK = SPICLKDIV_8;
	
	BCM2835_SPICS |= SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX | SPI_CS_CS_01|SPI_CS_CPOL;
	/* clear FIFOs */
	
	/* activate transfer *///TA=1
	BCM2835_SPICS |= SPI_CS_TA ; /*SPI Mode 2, CS1*/

	BCM2835_SPIFIFO = 0xFF;
	BCM2835_SPIFIFO = 0x02;
	BCM2835_SPIFIFO = 0x03;
	BCM2835_SPIFIFO = 0xFF; // Send the MCP23S17 opcode, chip address, and write bit
	
	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE)){}
	/* clear DONE bit */ //Clear TA
	BCM2835_SPICS &=(~SPI_CS_TA);  // CLear ta
	
	BCM2835_SPICS &= (~SPI_CS_CLEAR_RX) & (~SPI_CS_CLEAR_TX) & (~SPI_CS_CS_01) & (~SPI_CS_CPOL);

}

static void setup_mcp23s17(void) {
	char *buf;
	int i;
	BCM2835_SPICLK = SPICLKDIV_32;
	//printf("In write_mcp23s17\n");
	/* activate transfer */ //TA=1
	BCM2835_SPICS |= SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX;
	BCM2835_SPICS |= SPI_CS_TA;

	BCM2835_SPIFIFO= OPCODEW;             // Send the MCP23S17 opcode, chip address, and write bit
	BCM2835_SPIFIFO= IODIRA;                                   // Send the register we want to write
	BCM2835_SPIFIFO= 0x00;     
	
	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */ //Clear TA
	BCM2835_SPICS &=(~SPI_CS_TA);
	
	BCM2835_SPICS |= SPI_CS_TA;

	BCM2835_SPIFIFO= OPCODEW;             // Send the MCP23S17 opcode, chip address, and write bit
	BCM2835_SPIFIFO= IODIRB;                                   // Send the register we want to write
	BCM2835_SPIFIFO= 0x00;     
	
	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */ //Clear TA
	BCM2835_SPICS &=(~SPI_CS_TA);
	
	BCM2835_SPICS |= SPI_CS_TA;

	BCM2835_SPIFIFO= OPCODEW;             // Send the MCP23S17 opcode, chip address, and write bit
	BCM2835_SPIFIFO= GPPUA;                                   // Send the register we want to write
	BCM2835_SPIFIFO= 0xFF;     
	
	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */ //Clear TA
	BCM2835_SPICS &=(~SPI_CS_TA);
	
	BCM2835_SPICS |= SPI_CS_TA;

	BCM2835_SPIFIFO= OPCODEW;             // Send the MCP23S17 opcode, chip address, and write bit
	BCM2835_SPIFIFO= GPPUB;                                   // Send the register we want to write
	BCM2835_SPIFIFO= 0xFF;     
	
	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */ //Clear TA
	BCM2835_SPICS &=(~SPI_CS_TA);

	BCM2835_SPICS &= (~SPI_CS_CLEAR_RX) & (~SPI_CS_CLEAR_TX);
	
}

